name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  e2e-basic:
    name: Basic E2E Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg sox libsndfile1-dev
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install TTS CLI
      run: |
        ./setup.sh install --dev
    
    - name: Verify installation
      run: |
        tts --version
        tts providers
    
    - name: Run basic workflow tests
      run: |
        pytest tests/e2e/test_complete_workflows.py::TestBasicSynthesisWorkflows -v --tb=short
      timeout-minutes: 15
    
    - name: Run pipeline integration tests
      run: |
        pytest tests/e2e/test_pipeline_integration.py::TestMultiProviderComparison -v --tb=short
      timeout-minutes: 10
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-basic-artifacts-${{ matrix.python-version }}
        path: |
          tests/e2e/*.json
          tests/e2e/*.log
        retention-days: 7

  e2e-workflows:
    name: Complete Workflow Tests
    runs-on: ubuntu-latest
    needs: e2e-basic
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg sox libsndfile1-dev
    
    - name: Install TTS CLI
      run: |
        ./setup.sh install --dev
    
    - name: Run complete workflow tests
      run: |
        pytest tests/e2e/test_complete_workflows.py -v --tb=short
      timeout-minutes: 30
      env:
        TEST_PERFORMANCE_WORKFLOWS: 1
    
    - name: Run document processing workflows
      run: |
        pytest tests/e2e/test_complete_workflows.py::TestDocumentProcessingWorkflows -v --tb=short
      timeout-minutes: 20
    
    - name: Upload workflow results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: workflow-test-results
        path: |
          tests/e2e/latest_benchmark_results.json
        retention-days: 30

  e2e-performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: e2e-basic
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg sox libsndfile1-dev
    
    - name: Install TTS CLI
      run: |
        ./setup.sh install --dev
    
    - name: Download previous baselines
      uses: actions/download-artifact@v3
      continue-on-error: true
      with:
        name: performance-baselines
        path: tests/e2e/
    
    - name: Run synthesis performance benchmarks
      run: |
        pytest tests/e2e/test_performance_benchmarks.py::TestSynthesisPerformanceBenchmarks -v --tb=short
      timeout-minutes: 25
    
    - name: Run provider performance comparison
      run: |
        pytest tests/e2e/test_performance_benchmarks.py::TestProviderPerformanceComparison -v --tb=short
      timeout-minutes: 20
    
    - name: Run performance regression tests
      run: |
        pytest tests/e2e/test_performance_benchmarks.py::TestPerformanceRegression -v --tb=short
      timeout-minutes: 15
    
    - name: Upload performance baselines
      uses: actions/upload-artifact@v3
      with:
        name: performance-baselines
        path: |
          tests/e2e/performance_baselines.json
          tests/e2e/latest_benchmark_results.json
        retention-days: 90
    
    - name: Comment performance results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const results = JSON.parse(fs.readFileSync('tests/e2e/latest_benchmark_results.json', 'utf8'));
            const comment = `## Performance Benchmark Results
            
            ### Synthesis Performance
            - Short text average: ${results.short_text_synthesis?.avg_synthesis_time?.toFixed(2) || 'N/A'}s
            - Medium text average: ${results.medium_text_synthesis?.synthesis_time?.toFixed(2) || 'N/A'}s
            - Success rate: ${(results.short_text_synthesis?.success_rate * 100)?.toFixed(1) || 'N/A'}%
            
            ### Provider Comparison
            - Providers tested: ${results.provider_comparison?.providers_tested?.length || 0}
            - Successful providers: ${results.provider_comparison?.successful_providers?.length || 0}
            - Fastest provider: ${results.provider_comparison?.fastest_provider || 'N/A'}
            
            *Results from commit ${context.sha.substring(0, 7)}*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not read performance results:', error.message);
          }

  e2e-stress:
    name: Stress Tests
    runs-on: ubuntu-latest
    needs: e2e-basic
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[stress-test]') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg sox libsndfile1-dev
    
    - name: Install TTS CLI
      run: |
        ./setup.sh install --dev
    
    - name: Run memory leak detection tests
      run: |
        pytest tests/e2e/test_stress_regression.py::TestMemoryLeakDetection -v --tb=short
      timeout-minutes: 20
      env:
        TEST_MEMORY_STRESS: 1
    
    - name: Run concurrency stress tests
      run: |
        pytest tests/e2e/test_stress_regression.py::TestConcurrencyStress -v --tb=short
      timeout-minutes: 15
    
    - name: Run resource exhaustion tests
      run: |
        pytest tests/e2e/test_stress_regression.py::TestResourceExhaustionHandling -v --tb=short
      timeout-minutes: 25
      env:
        TEST_RESOURCE_EXHAUSTION: 1
    
    - name: Run regression detection suite
      run: |
        pytest tests/e2e/test_stress_regression.py::TestRegressionDetection -v --tb=short
      timeout-minutes: 20
    
    - name: Upload stress test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: stress-test-results
        path: |
          tests/e2e/regression_test_results.json
        retention-days: 30

  e2e-real-scenarios:
    name: Real User Scenarios
    runs-on: ubuntu-latest
    needs: e2e-basic
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg sox libsndfile1-dev
    
    - name: Install TTS CLI
      run: |
        ./setup.sh install --dev
    
    - name: Run content creation scenarios
      run: |
        pytest tests/e2e/test_real_user_scenarios.py::TestContentCreationScenarios -v --tb=short
      timeout-minutes: 25
    
    - name: Run document processing scenarios
      run: |
        pytest tests/e2e/test_real_user_scenarios.py::TestDocumentProcessingScenarios -v --tb=short
      timeout-minutes: 20
    
    - name: Run accessibility scenarios
      run: |
        pytest tests/e2e/test_real_user_scenarios.py::TestAccessibilityScenarios -v --tb=short
      timeout-minutes: 15
    
    - name: Run complex real-world scenarios
      run: |
        pytest tests/e2e/test_real_user_scenarios.py::TestComplexRealWorldScenarios -v --tb=short
      timeout-minutes: 30
      env:
        TEST_COMPLEX_SCENARIOS: 1
    
    - name: Upload scenario results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: real-scenario-results
        path: |
          tests/e2e/*.json
        retention-days: 14

  e2e-summary:
    name: E2E Test Summary
    runs-on: ubuntu-latest
    needs: [e2e-basic, e2e-workflows, e2e-performance, e2e-stress, e2e-real-scenarios]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
    
    - name: Generate test summary
      run: |
        echo "# E2E Test Summary" > test_summary.md
        echo "" >> test_summary.md
        echo "## Test Results" >> test_summary.md
        echo "- Basic E2E: ${{ needs.e2e-basic.result }}" >> test_summary.md
        echo "- Workflows: ${{ needs.e2e-workflows.result }}" >> test_summary.md
        echo "- Performance: ${{ needs.e2e-performance.result }}" >> test_summary.md
        echo "- Stress Tests: ${{ needs.e2e-stress.result }}" >> test_summary.md
        echo "- Real Scenarios: ${{ needs.e2e-real-scenarios.result }}" >> test_summary.md
        echo "" >> test_summary.md
        echo "## Artifacts Generated" >> test_summary.md
        find artifacts/ -name "*.json" | while read file; do
          echo "- $(basename "$file")" >> test_summary.md
        done
        
        cat test_summary.md
    
    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-summary
        path: test_summary.md
        retention-days: 30
    
    - name: Fail if critical tests failed
      if: needs.e2e-basic.result == 'failure' || needs.e2e-workflows.result == 'failure'
      run: |
        echo "Critical E2E tests failed!"
        exit 1