[build-system]
requires = [ "setuptools>=64", "wheel",]
build-backend = "setuptools.build_meta"

[project]
name = "goobits-tts"
version = "1.1.3"
description = "Command-line text-to-speech tool with multiple providers, voice cloning, and smart auto-selection"
readme = "CLAUDE.md"
requires-python = ">=3.8"
classifiers = [ "Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: 3.10", "Programming Language :: Python :: 3.11", "Programming Language :: Python :: 3.12", "Topic :: Multimedia :: Sound/Audio :: Speech", "Topic :: Software Development :: Libraries :: Python Modules",]
dependencies = [ "click>=8.0.0", "rich-click>=1.7.0", "rich>=13.0.0", "edge-tts>=7.0.0", "requests>=2.25.0",]
[[project.authors]]
name = "TTS CLI Contributors"

[project.license]
text = "MIT"

[project.optional-dependencies]
openai = [ "openai>=1.0.0",]
google = [ "google-cloud-texttospeech>=2.0.0",]
elevenlabs = [ "elevenlabs>=1.0.0",]
chatterbox = [ "chatterbox-tts>=0.1.2", "torch>=2.6.0", "torchaudio>=2.6.0", "soundfile>=0.13.0",]
cloud = [ "openai>=1.0.0", "google-cloud-texttospeech>=2.0.0", "elevenlabs>=1.0.0",]
local = [ "chatterbox-tts>=0.1.2", "torch>=2.6.0", "torchaudio>=2.6.0", "soundfile>=0.13.0",]
all = [ "openai>=1.0.0", "google-cloud-texttospeech>=2.0.0", "elevenlabs>=1.0.0", "chatterbox-tts>=0.1.2", "torch>=2.6.0", "torchaudio>=2.6.0", "soundfile>=0.13.0",]
dev = [ "pytest>=7.0", "pytest-asyncio", "pytest-cov", "black", "ruff", "mypy", "build", "twine", "hypothesis",]

[project.scripts]
tts = "tts.cli:cli_entry"

[project.urls]
Homepage = "https://github.com/mudcube/tts-cli"
"Bug Tracker" = "https://github.com/mudcube/tts-cli/issues"

[tool.setuptools]
packages = [ "tts", "tts.providers", "tts.document_processing", "tts.speech_synthesis",]

[tool.black]
line-length = 128
target-version = [ "py38",]

[tool.ruff]
line-length = 128
target-version = "py38"
cache-dir = ".temp/ruff"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
cache_dir = ".temp/mypy"

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.package-data]
tts = [ "setup.sh",]

[tool.ruff.lint]
select = [ "E", "W", "F", "I", "B",]

[tool.coverage.run]
data_file = ".temp/.coverage"
parallel = true
source = [ "src/tts",]

[tool.coverage.report]
exclude_lines = [ "pragma: no cover", "def __repr__", "if __name__ == .__main__.:", "raise AssertionError", "raise NotImplementedError",]

[tool.coverage.html]
directory = ".temp/htmlcov"

[tool.pytest.ini_options]
cache_dir = ".temp/pytest"
testpaths = [ "tests",]
python_files = [ "test_*.py",]
python_classes = [ "Test*",]
python_functions = [ "test_*",]
addopts = [ "-v", "--tb=short", "--strict-markers", "--strict-config", "--durations=10",]
markers = [ "slow: marks tests as slow (deselect with '-m \"not slow\"')", "integration: marks tests as integration tests", "unit: marks tests as unit tests", "e2e: marks tests as end-to-end tests", "config: marks tests related to configuration", "audio: marks tests related to audio processing", "provider: marks tests related to TTS providers", "workflow: marks tests as workflow tests", "benchmark: marks tests as benchmark tests", "pipeline: marks tests as pipeline integration tests", "realuser: marks tests as real user scenario tests", "stress: marks tests as stress tests", "performance: marks tests as performance tests", "regression: marks tests as regression tests", "requires_providers: mark test to require actual TTS providers",]
filterwarnings = [ "ignore::DeprecationWarning", "ignore::PendingDeprecationWarning",]
